{"version":3,"sources":["Intro.js","Projects.js","App.js","serviceWorker.js","index.js"],"names":["Intro","props","user","Grid","container","justify","item","xs","Box","style","backgroundColor","padding","CardContent","name","projects","width","alignItems","spacing","map","project","key","sm","md","Card","height","windowHeight","App","useState","useWindowSize","fps","Fragment","CssBaseline","windowWidth","Projects","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4QA2BeA,MAlBf,SAAeC,GACX,IAAIC,EAAOD,EAAMC,KAAK,GACtB,OACI,kBAACC,EAAA,EAAD,CAAOC,WAAS,EAACC,QAAQ,WACrB,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAM,IACb,kBAACC,EAAA,EAAD,CAAKC,MAAS,CACNC,gBAAiB,UACjBC,QAAS,SAEb,kBAACC,EAAA,EAAD,KACCV,EAAKW,U,QCZpBC,EAAW,CACb,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,sEAAuE,MAAQ,GACxF,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,SAAU,MAAQ,GAC3B,CAAC,KAAQ,gFAAiF,MAAQ,GAClG,CAAC,KAAQ,UAAW,MAAQ,IA8BjBd,MA3Bf,SAAeC,GACX,OAEI,yBAAKQ,MAAO,CAACE,QAAS,GAAII,MAAM,SAChC,kBAACZ,EAAA,EAAD,CAAOC,WAAS,EAACC,QAAQ,gBAAgBW,WAAW,aAAaC,QAAS,EAC1ER,MAAO,IAGHK,EAASI,KAAI,SAACC,GAAD,OACT,kBAAChB,EAAA,EAAD,CAAMG,MAAI,EAACc,IAAM,aAAeD,EAAQN,KAAON,GAAsB,EAAhBY,EAAQJ,MAAWM,GAAIF,EAAQJ,MAAOO,GAAIH,EAAQJ,MAAQ,GAC3G,kBAACQ,EAAA,EAAD,CAAMd,MAAS,CACPC,gBAAiB,UACjBc,OAA6B,GAArBvB,EAAMwB,cAEtBL,IAAK,WAAaD,EAAQN,MACtB,kBAACD,EAAA,EAAD,KACKO,EAAQN,c,gBCTtBa,MAnBf,WACS,IAAAxB,EAAOyB,mBAAS,CAClBd,KAAM,cADJ,EAGiBe,wBACd,IACA,IACA,CAACC,IAAI,KANR,mBAGAd,EAHA,KAGOS,EAHP,KASL,OACI,kBAAC,IAAMM,SAAP,KACI,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,CAAON,aAAcD,EAAQQ,YAAajB,EAAOb,KAAMA,IACvD,kBAAC+B,EAAD,CAAUR,aAAcD,EAAQQ,YAAajB,MCZrCmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9b81943e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid'\nimport Box from '@material-ui/core/Box'\nimport { responsiveFontSizes } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\n\nfunction Intro(props) {\n    let user = props.user[0];\n    return (\n        <Grid  container justify=\"stretch\">\n            <Grid item xs = {12}>\n                <Box style = {{\n                        backgroundColor: \"#CCCCCC\",\n                        padding: \"10px\"\n                    }}>\n                    <CardContent>\n                    {user.name}\n                    </CardContent>\n                </Box>\n            </Grid>\n        </Grid>\n    );\n\n}\nexport default Intro;\n\n","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nconst projects = [\n    {\"name\": \"task 0\", \"width\":6}, \n    {\"name\": \"task 1\", \"width\":6},\n    {\"name\": \"task 2\", \"width\":6},\n    {\"name\": \"task 3aaaaaaaaaaaaaaaaaaaa aaaaaaaaaaaaaal aaaaaaaaaa aaaaaaaaaaaaa\", \"width\":6},\n    {\"name\": \"task 4\", \"width\":6},\n    {\"name\": \"task 5\", \"width\":6},\n    {\"name\": \"task 6\", \"width\":6},\n    {\"name\": \"task 7\", \"width\":6},\n    {\"name\": \"task 8\", \"width\":6},\n    {\"name\": \"task 9\", \"width\":6},\n    {\"name\": \"task 10djwjjjjjjjjjjjjjjjj jjjjjjjjjjjjjjjj jjjjjjjjjjjjjjj jjjjjjjjjjjjjjjjj\", \"width\":6},\n    {\"name\": \"task 11\", \"width\":6}\n]\n\nfunction Intro(props) {\n    return (\n \n        <div style={{padding: 10, width:\"100%\"}}>\n        <Grid  container justify=\"space-between\" alignItems=\"flex-start\" spacing={2}\n        style={{\n        }}>\n            {\n            projects.map((project) =>   \n                <Grid item key ={\"grid_item_\" + project.name}  xs = {project.width * 2} sm={project.width} md={project.width - 2}>\n                    <Card style = {{\n                            backgroundColor: \"#CCCCCC\",\n                            height: props.windowHeight * 0.4,\n                        }}\n                    key={\"project_\" + project.name} >\n                        <CardContent>\n                            {project.name}\n                        </CardContent>\n                    </Card>\n                </Grid>\n            )\n        }\n        </Grid>\n        </div>\n    );\n}\n\nexport default Intro;\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport Intro from './Intro';\nimport Projects from './Projects.js';\nimport Grid from '@material-ui/core/Grid';\nimport {useWindowSize} from '@react-hook/window-size/throttled'\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\n\n\nfunction App() {\n   const user = useState({\n       name: 'feldtsen '\n    }),\n        [width, height] = useWindowSize(\n            360,\n            720,\n            {fps:30}\n        );\n\n    return (\n        <React.Fragment>\n            <CssBaseline/>\n            <Intro windowHeight={height} windowWidth={width} user={user} />\n            <Projects windowHeight={height} windowWidth={width} />\n        </React.Fragment>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}