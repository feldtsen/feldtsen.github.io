{"version":3,"sources":["Intro.js","App.js","serviceWorker.js","index.js"],"names":["Intro","props","user","react_default","a","createElement","Grid","container","direction","style","height","windowHeight","fontSize","windowWidth","paddingTop","paddingLeft","className","item","name","subTitle","App","useState","_useWindowSize","useWindowSize","fps","_useWindowSize2","Object","slicedToArray","width","xs","src_Intro","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qNAmBeA,MAff,SAAeC,GACX,IAAIC,EAAOD,EAAMC,KAAK,GACtB,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,MAAO,CACtCC,OAA6B,GAArBT,EAAMU,aACdC,SAAUX,EAAMY,aAAe,IAA0B,IAApBZ,EAAMY,YAAyC,IAApBZ,EAAMY,YAClEC,WAAiC,IAArBb,EAAMU,aAClBI,YAAiC,IAApBd,EAAMY,aACxBG,UAAU,SACTb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMW,MAAI,GAAEf,EAAKgB,MACjBf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMW,MAAI,GAAEf,EAAKiB,oBCcdC,MAtBf,WACS,IAAAlB,EAAOmB,mBAAS,CACjBH,KAAM,WACNC,SAAU,6BAFTG,EAIiBC,YACd,IACA,IACA,CAACC,IAAI,KAPRC,EAAAC,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAIAM,EAJAH,EAAA,GAIOf,EAJPe,EAAA,GAUL,OACItB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,UAEtBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMW,MAAI,EAACY,GAAI,GAAIb,UAAU,OACzBb,EAAAC,EAAAC,cAACyB,EAAD,CAAOnB,aAAcD,EAAQG,YAAae,EAAO1B,KAAMA,OCTnD6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2f0f118b.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid'\n\nfunction Intro(props) {\n    let user = props.user[0];\n    return (\n        <Grid container direction='column' style={{\n            height: props.windowHeight * 0.6,\n            fontSize: props.windowWidth >= 800 ? props.windowWidth * 0.04 : props.windowWidth * 0.07,\n                paddingTop: props.windowHeight * 0.05,\n                paddingLeft: props.windowWidth * 0.05\n        }} className=\"Intro\">\n            <Grid item>{user.name}</Grid>\n            <Grid item>{user.subTitle}</Grid>\n        </Grid>\n    );\n}\n\nexport default Intro;\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport Intro from './Intro';\nimport Grid from '@material-ui/core/Grid';\nimport {useWindowSize} from '@react-hook/window-size/throttled'\n\nfunction App() {\n   const user = useState({\n        name: 'feldtsen',\n        subTitle: 'computer science student'\n    }),\n        [width, height] = useWindowSize(\n            360,\n            720,\n            {fps:30}\n        );\n\n    return (\n        <Grid container direction=\"column\">\n\n            <Grid item xs={12} className=\"App\">\n                <Intro windowHeight={height} windowWidth={width} user={user} />\n            </Grid>\n\n        </Grid>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}