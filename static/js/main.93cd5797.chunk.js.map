{"version":3,"sources":["pic sync /^/.//.*/.png$","pic/ataleuntold.png","pic/bondeliafeltet.png","pic/chatnip.png","pic/diceroll.png","pic/facile.png","pic/huehunch.png","pic/paperstack.png","pic/patatapclone.png","pic/todo.png","pic/widgify.png","pic/writeline.png","Intro.js","Projects.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Intro","props","user","Grid","itemkey","container","item","xs","Box","style","padding","fontSize","windowHeight","name","NrOfColumns","width","direction","windowWidth","nr","key","db","projects","filter","project","column","overflowY","overflowX","margin","CardActionArea","className","CardMedia","href","link","src","require","title","alt","App","useState","useWindowSize","fps","height","Fragment","Projects","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.93cd5797.chunk.js","sourcesContent":["var map = {\n\t\"./ataleuntold.png\": 59,\n\t\"./bondeliafeltet.png\": 60,\n\t\"./chatnip.png\": 61,\n\t\"./diceroll.png\": 62,\n\t\"./facile.png\": 63,\n\t\"./huehunch.png\": 64,\n\t\"./paperstack.png\": 65,\n\t\"./patatapclone.png\": 66,\n\t\"./todo.png\": 67,\n\t\"./widgify.png\": 68,\n\t\"./writeline.png\": 69\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 58;","module.exports = __webpack_public_path__ + \"static/media/ataleuntold.4573f1fb.png\";","module.exports = __webpack_public_path__ + \"static/media/bondeliafeltet.28c115da.png\";","module.exports = __webpack_public_path__ + \"static/media/chatnip.48df492e.png\";","module.exports = __webpack_public_path__ + \"static/media/diceroll.0bd6a0a2.png\";","module.exports = __webpack_public_path__ + \"static/media/facile.f36891d9.png\";","module.exports = __webpack_public_path__ + \"static/media/huehunch.9803adf9.png\";","module.exports = __webpack_public_path__ + \"static/media/paperstack.09d59fd4.png\";","module.exports = __webpack_public_path__ + \"static/media/patatapclone.89a4aab0.png\";","module.exports = __webpack_public_path__ + \"static/media/todo.49b5caf5.png\";","module.exports = __webpack_public_path__ + \"static/media/widgify.6416a2db.png\";","module.exports = __webpack_public_path__ + \"static/media/writeline.2f174f68.png\";","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid'\nimport Box from '@material-ui/core/Box'\n\n\nfunction Intro(props) {\n    let user = props.user[0];\n    return (\n        <Grid itemkey=\"grid_container_intro\"  container>\n            <Grid item \n            xs = {12}\n            >\n                <Box \n                style = {{\n                    //backgroundColor: \"#CCCCCC\",\n                    padding: \"40px 0 20px 40px\",\n                    fontSize: props.windowHeight * .06\n                }}>\n                    {user.name}\n                </Box>\n            </Grid>\n        </Grid>\n    );\n\n}\nexport default Intro;\n\n","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardActionArea from '@material-ui/core/CardActionArea';\n\nimport db from './db.json';\n\nfunction SetMinWidth(width)\n{\n    if (width > 1200) return 33;\n    return 100;\n}\n\nfunction NrOfColumns(width)\n{\n    if (width > 1200) return [1, 2, 3];\n    return [1];\n}\n\nfunction Intro(props) {\n   return (\n        <Grid container\n        style={{\n            padding: \".5%\"\n        }}\n        direction=\"row\"\n        >\n            {\n                NrOfColumns(props.windowWidth).map((nr) =>\n                    <Grid container \n                    key={\"grid_container_\"+nr}\n                    direction=\"column\"\n                    style ={{\n                        width: SetMinWidth(props.windowWidth) + \"%\"\n                    }}\n                    >\n                    {\n                        db.projects.filter((project) => nr === project.column || NrOfColumns(props.windowWidth) === 1).map((project) =>   \n                                <Grid item \n                                key ={\"grid_item_\" + project.id}  \n                                style={{ \n                                    overflowY: \"hidden\", \n                                    overflowX: \"hidden\",\n                                    width: \"99%\",\n                                    margin: \"1% 0.5% 0 .5%\"\n                                }}\n                                >\n                                    <CardActionArea>\n                                        <Box \n                                        className=\"image_container\"\n                                        key={\"project_\" + project.id} \n                                        >\n                                            <CardMedia>\n                                                <a href={`${project.link}`}>\n                                                    <img \n                                                    src={require(`./pic/${project.title}.png`)} \n                                                    alt=\"thumbnail\" \n                                                    className=\"thumbnails\"  \n                                                    />\n                                                 </a>\n                                            </CardMedia>\n                                        </Box>\n                                    </CardActionArea>\n                                </Grid>\n                            )\n                        }\n                    </Grid>\n                )\n            }   \n        </Grid>\n    );\n}\n\nexport default Intro;\n\n","import React, {useState} from 'react';\nimport './App.css';\nimport Intro from './Intro';\nimport Projects from './Projects.js';\nimport {useWindowSize} from '@react-hook/window-size/throttled'\n\n\nfunction App() {\n   const user = useState({\n        name: 'feldtsen '\n    }),\n        [width, height] = useWindowSize(\n            360,\n            720,\n            {fps:30}\n        );\n\n    return (\n        <React.Fragment>\n\n            <Intro \n            windowHeight={height} \n            windowWidth={width} \n            user={user} \n            />\n\n            <Projects \n            windowHeight={height} \n            windowWidth={width} \n            />\n\n        </React.Fragment>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}